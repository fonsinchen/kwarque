"use strict";


var db = require('pg');
//or native libpq bindings
//var pg = require('pg').native

var kwarque = require('kwarque');
var raster = require('raster');

var config = {
    host : '/var/run/postgresql',
    database : 'kwarque'
};

var queries = {
    'getFragments'   : "SELECT id, location[0] AS lon, location[1] AS lat, title, text FROM fragment WHERE location <@ BOX(POINT($1, $2), POINT($3, $4))",
    'insertFragment' : "INSERT INTO fragment (location, title, text) VALUES (POINT($1, $2), $3, $4) RETURNING id"
}

var query = function(name, values, row, end) {
    db.connect(config, function(err, client) {
        if (err) {
            if (end) end("error");
        } else {
            var q = client.query({
                name : name,
                text : queries[name],
                values : values
            });
            if (row) q.on("row", row);
            if (end) {
                q.on("end", function() {
                    end('end', end.id);
                });
                q.on("error", function(message) {
                    console.log(message);
                    end("error");
                });
            }
        }
    });
};

var getIntervals = function(type, values) {
    var intervals = [];
    var start = values[0];
    for (var i = 1; i < values.length; ++i) {
        if (values[i - 1] > values[i]) {
            if (start !== raster.max(type)) intervals.push([start, raster.max(type)]);
            start = raster.min(type);
        }
    }
    if (start !== values[i - 1]) intervals.push([start, values[i - 1]]);
    return intervals;
}

var getFragments = function(select, row, end) {
    
    var lonIntervals = getIntervals('lon', select.lon.values);
    var latIntervals = getIntervals('lat', select.lat.values);
    var endResult = '';
    var numQueries = 0;
    var numResults = 0;
    for (var i = 0; i < lonIntervals.length; ++i) {
        for (var j = 0; j < latIntervals.length; ++j) {
            ++numQueries;
            query('getFragments', [
                lonIntervals[i][0],
                latIntervals[j][0],
                lonIntervals[i][1],
                latIntervals[j][1],
            ], row, function(result) {
                if (endResult !== 'error') endResult = result;
                if (++numResults === numQueries) end(endResult);
            });
        }
    }
    
};
        
var insertFragment = function(data, end) {
    query('insertFragment', [data.lon, data.lat, data.title, data.text], function(row) {
        end.id = row.id;
    }, end);
};

kwarque.on('clientConnect', function(client) {
    /**
     * watch an area on the map.
     */
    client.on("watch", function(select, fn) {
        getFragments(select, function(row) {
            client.emit('fragment', row);
        }, fn);
    });
    /**
     * ignore an area on the map
     */
    client.on("ignore", function(select, fn) {
                
    });
            
    client.on("insert", function(data, fn) {
        insertFragment(data, fn);
        var lon = raster.rasterize('lon', data.lon, data.lon);
        var lat = raster.rasterize('lat', data.lat, data.lat);
        console.log(lon, lat);
    });
});