"use strict";

var store = require('chat').io.store;
var db = require('pg');
//or native libpq bindings
//var pg = require('pg').native

var kwarque = require('kwarque');
var quadtree = require('quadtree');

var tree = quadtree.init({
    x : -20037508.34,
    y : -20037508.34,
    w : 20037508.34 * 2,
    h : 20037508.34 * 2,
    maxDepth : 16,
    maxChildren : 128
});

var config = {
    host : '/var/run/postgresql',
    database : 'kwarque'
};

var queries = {
    'getFragments'   : "SELECT id, x, y, title, text FROM fragment WHERE x > $1 AND x < $3 AND y > $2 AND y < $4",
    'insertFragment' : "INSERT INTO fragment (x, y, title, text) VALUES ($1, $2, $3, $4) RETURNING id"
}

store.subscribe('fragment', function(fragment) {
    tree.retrieve(fragment, function(client) {
        client.emit('fragment', fragment);
    });
});

var query = function(name, values, row, end) {
    db.connect(config, function(err, client) {
        if (err) {
            if (end) end("error");
        } else {
            var q = client.query({
                name : name,
                text : queries[name],
                values : values
            });
            if (row) q.on("row", row);
            if (end) {
                q.on("end", function() {
                    end('end', end.id);
                });
                q.on("error", function(message) {
                    console.log(message);
                    end("error");
                });
            }
        }
    });
};

var getFragments = function(select, row, end) {
    query('getFragments', [
        Math.floor(select.x),
        Math.floor(select.y),
        Math.ceil(select.x + select.w),
        Math.ceil(select.y + select.h),
    ], row, end);
};
        
var insertFragment = function(data, end) {
    query('insertFragment', [
        Math.round(data.x),
        Math.round(data.y),
        data.title,
        data.text
    ], function(row) {
        end.id = row.id;
    }, end);
};

kwarque.on('clientConnect', function(client) {
    client.watchedNodes = [];
    /**
     * watch an area on the map.
     */
    client.on("watch", function(select, fn) {
        getFragments(select, function(row) {
            client.emit('fragment', row);
        }, fn);
        var node = tree.insertNode(select);
        node.insert(client);
        client.watchedNodes.push(node);
    });
    /**
     * ignore an area on the map
     */
    client.on("ignore", function(fn) {
        for (var i = 0; i < client.watchedNodes.length - 1; ++i) {
            client.watchedNodes[i].remove(client);
        }
        client.watchedNodes.length = 0;
        fn('end');
    });
            
    client.on("insert", function(data, fn) {
        var handler = function(result) {
            fn(result, handler.id);
            data.id = handler.id;
            data.w = 0;
            data.h = 0;
            tree.retrieve(data, function(otherClient) {
                if (client !== otherClient) otherClient.emit('fragment', data);
            });
            store.publish('fragment', data);
        };
        insertFragment(data, handler);
    });
});