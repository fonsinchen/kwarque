"use strict";


var db = require('pg');
//or native libpq bindings
//var pg = require('pg').native

var kwarque = require('kwarque');

var config = {
    host : '/var/run/postgresql',
    database : 'kwarque'
};

var queries = {
    'getIntervals'   : "SELECT id, min, max, level FROM $1 WHERE min >= $2 AND max <= $3",
    'getFragments'   : "SELECT id, location[0] AS lon, location[1] AS lat, title, text FROM fragment",
    'insertFragment' : "INSERT INTO fragment (location, title, text) VALUES (POINT($1, $2), $3, $4)"
}

var query = function(name, values, row, end) {
    db.connect(config, function(err, client) {
        if (err) {
            end("error");
        } else {
            var q = client.query({
                name : name,
                text : queries[name],
                values : values
            });
            q.on("row", row);
            q.on("end", function() {
                end('end');
            });
            q.on("error", function(message) {
                end("error");
                console.log(message);
            });
        }
    });
};

var getIntervals = function(type, min, max, row, end) {
    query('getIntervals', [type + 'Intervals', min, max], row, end);
};

var getFragments = function(row, end) {
    query('getFragments', [], row, end);
};
        
var insertFragment = function(data, end) {
    query('insertFragment', [data.lon, data.lat, data.title, data.text], null, end);
};

kwarque.on('clientConnect', function(client) {
    /**
     * watch an area on the map.
     */
    client.on("watch", function(select, fn) {
        getFragments(function(row) {
            client.emit('fragment', row);
        }, fn);
    });
    /**
     * ignore an area on the map
     */
    client.on("ignore", function(select, fn) {
                
    });
            
    client.on("insert", function(data, fn) {
        insertFragment(data, fn);
    });
});